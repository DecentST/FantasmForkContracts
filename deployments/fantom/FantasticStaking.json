{
  "address": "0xd26CfAcF9173f01b61B9BE5FE50Ff3e02a6aafFF",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stakingTokenReserve",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_minters",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "distributor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "RewardDistributorApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardsToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardTokenAddress",
          "type": "address"
        }
      ],
      "name": "RewardTokenAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardsToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_distributor",
          "type": "address"
        }
      ],
      "name": "addReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardsToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_distributor",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "approveRewardDistributor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "claimableRewards",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct FantasticStaking.RewardData[]",
          "name": "_rewards",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "earnedBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "unlockTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct FantasticStaking.LockedBalance[]",
          "name": "earningsData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardsToken",
          "type": "address"
        }
      ],
      "name": "getRewardForDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardsToken",
          "type": "address"
        }
      ],
      "name": "lastTimeRewardApplicable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "lockedBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unlockable",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "locked",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "unlockTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct FantasticStaking.LockedBalance[]",
          "name": "lockData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockedSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "minters",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "mintersArray",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardsToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "notifyRewardAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "periodFinish",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastUpdateTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardPerTokenStored",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardDistributors",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardsToken",
          "type": "address"
        }
      ],
      "name": "rewardPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "lock",
          "type": "bool"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingToken",
      "outputs": [
        {
          "internalType": "contract IYToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingTokenReserve",
      "outputs": [
        {
          "internalType": "contract IYTokenReserve",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "totalBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "unlockedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userRewardPerTokenPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawExpiredLocks",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "withdrawableBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "penaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xae53389a1a3bda8ccedbe72a60ec1b902a159f42be278425ddccd1372a1574cc",
  "receipt": {
    "to": null,
    "from": "0xA9964a4a3fc91B735ED7d7f5e4Ff8c9913B71dBF",
    "contractAddress": "0xd26CfAcF9173f01b61B9BE5FE50Ff3e02a6aafFF",
    "transactionIndex": 1,
    "gasUsed": "3610827",
    "logsBloom": "0x
    "blockHash": "0x000177b10000104006eab3d4b2f945b3b5d76ef9caf0941dcd5daf4fc87f738d",
    "transactionHash": "0xae53389a1a3bda8ccedbe72a60ec1b902a159f42be278425ddccd1372a1574cc",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 34294072,
        "transactionHash": "0xae53389a1a3bda8ccedbe72a60ec1b902a159f42be278425ddccd1372a1574cc",
        "address": "0xd26CfAcF9173f01b61B9BE5FE50Ff3e02a6aafFF",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a9964a4a3fc91b735ed7d7f5e4ff8c9913b71dbf"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x000177b10000104006eab3d4b2f945b3b5d76ef9caf0941dcd5daf4fc87f738d"
      }
    ],
    "blockNumber": 34294072,
    "cumulativeGasUsed": "3741002",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2578d23dbF37FFC95f7b73C21cE6b3d6270efEA5",
    "0xdb12E8251089AAc7C133B50046A160217c0C4207",
    [
      "0x6D1BF6f4209f30aff930fb87D89EAC3770Fa3691"
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "e3b934c02ffbee22c3654f8fe1ecc068",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingTokenReserve\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_minters\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"distributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"RewardDistributorApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardsToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardTokenAddress\",\"type\":\"address\"}],\"name\":\"RewardTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_distributor\",\"type\":\"address\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_distributor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"approveRewardDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"claimableRewards\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct FantasticStaking.RewardData[]\",\"name\":\"_rewards\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"earnedBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"internalType\":\"struct FantasticStaking.LockedBalance[]\",\"name\":\"earningsData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"}],\"name\":\"getRewardForDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"}],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"lockedBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"locked\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"internalType\":\"struct FantasticStaking.LockedBalance[]\",\"name\":\"lockData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mintersArray\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"periodFinish\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerTokenStored\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardDistributors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"}],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"lock\",\"type\":\"bool\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IYToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingTokenReserve\",\"outputs\":[{\"internalType\":\"contract IYTokenReserve\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"totalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"unlockedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawExpiredLocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"withdrawableBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/farms/FantasticStaking.sol\":\"FantasticStaking\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/farms/FantasticStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"../interfaces/IYToken.sol\\\";\\r\\nimport \\\"../interfaces/IYTokenReserve.sol\\\";\\r\\nimport \\\"../libs/WethUtils.sol\\\";\\r\\n\\r\\n// Based on EPS's & Geist's MultiFeeDistribution\\r\\ncontract FantasticStaking is ReentrancyGuard, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n    using SafeERC20 for IYToken;\\r\\n\\r\\n    /* ========== STATE VARIABLES ========== */\\r\\n\\r\\n    struct Reward {\\r\\n        uint256 periodFinish;\\r\\n        uint256 rewardRate;\\r\\n        uint256 lastUpdateTime;\\r\\n        uint256 rewardPerTokenStored;\\r\\n    }\\r\\n    struct Balances {\\r\\n        uint256 total;\\r\\n        uint256 unlocked;\\r\\n        uint256 locked;\\r\\n        uint256 earned;\\r\\n    }\\r\\n    struct LockedBalance {\\r\\n        uint256 amount;\\r\\n        uint256 unlockTime;\\r\\n    }\\r\\n    struct RewardData {\\r\\n        address token;\\r\\n        uint256 amount;\\r\\n    }\\r\\n\\r\\n    IYToken public stakingToken;\\r\\n    IYTokenReserve public stakingTokenReserve;\\r\\n    address[] public rewardTokens;\\r\\n    mapping(address => Reward) public rewardData;\\r\\n\\r\\n    // Duration that rewards are streamed over\\r\\n    uint256 public constant rewardsDuration = 86400 * 7; // 1 week\\r\\n\\r\\n    // Duration of lock/earned penalty period\\r\\n    uint256 public constant lockDuration = rewardsDuration * 8; // 8 weeks\\r\\n\\r\\n    // Addresses approved to call mint\\r\\n    mapping(address => bool) public minters;\\r\\n    address[] public mintersArray;\\r\\n\\r\\n    // reward token -> distributor -> is approved to add rewards\\r\\n    mapping(address => mapping(address => bool)) public rewardDistributors;\\r\\n\\r\\n    // user -> reward token -> amount\\r\\n    mapping(address => mapping(address => uint256)) public userRewardPerTokenPaid;\\r\\n    mapping(address => mapping(address => uint256)) public rewards;\\r\\n\\r\\n    uint256 public totalSupply;\\r\\n    uint256 public lockedSupply;\\r\\n\\r\\n    // Private mappings for balance data\\r\\n    mapping(address => Balances) private balances;\\r\\n    mapping(address => LockedBalance[]) private userLocks;\\r\\n    mapping(address => LockedBalance[]) private userEarnings;\\r\\n\\r\\n    /* ========== CONSTRUCTOR ========== */\\r\\n\\r\\n    constructor(\\r\\n        address _stakingToken,\\r\\n        address _stakingTokenReserve,\\r\\n        address[] memory _minters\\r\\n    ) Ownable() {\\r\\n        stakingToken = IYToken(_stakingToken);\\r\\n        stakingTokenReserve = IYTokenReserve(_stakingTokenReserve);\\r\\n        stakingTokenReserve.setRewarder(address(this));\\r\\n        for (uint256 i; i < _minters.length; i++) {\\r\\n            minters[_minters[i]] = true;\\r\\n            mintersArray.push(_minters[i]);\\r\\n        }\\r\\n        // First reward MUST be the staking token or things will break\\r\\n        // related to the 50% penalty and distribution to locked balances\\r\\n        rewardTokens.push(_stakingToken);\\r\\n        rewardData[_stakingToken].lastUpdateTime = block.timestamp;\\r\\n        rewardData[_stakingToken].periodFinish = block.timestamp;\\r\\n    }\\r\\n\\r\\n    /* ========== ADMIN CONFIGURATION ========== */\\r\\n\\r\\n    // Add a new reward token to be distributed to stakers\\r\\n    function addReward(address _rewardsToken, address _distributor) public onlyOwner {\\r\\n        require(rewardData[_rewardsToken].lastUpdateTime == 0, \\\"MultiFeeDistribution::addReward: Invalid\\\");\\r\\n        rewardTokens.push(_rewardsToken);\\r\\n        rewardData[_rewardsToken].lastUpdateTime = block.timestamp;\\r\\n        rewardData[_rewardsToken].periodFinish = block.timestamp;\\r\\n        rewardDistributors[_rewardsToken][_distributor] = true;\\r\\n        emit RewardTokenAdded(_rewardsToken);\\r\\n        emit RewardDistributorApproved(_rewardsToken, _distributor, true);\\r\\n    }\\r\\n\\r\\n    // Modify approval for an address to call notifyRewardAmount\\r\\n    function approveRewardDistributor(\\r\\n        address _rewardsToken,\\r\\n        address _distributor,\\r\\n        bool _approved\\r\\n    ) external onlyOwner {\\r\\n        require(rewardData[_rewardsToken].lastUpdateTime > 0, \\\"MultiFeeDistribution::approveRewardDistributor: Invalid\\\");\\r\\n        rewardDistributors[_rewardsToken][_distributor] = _approved;\\r\\n        emit RewardDistributorApproved(_rewardsToken, _distributor, _approved);\\r\\n    }\\r\\n\\r\\n    /* ========== VIEWS ========== */\\r\\n\\r\\n    function _rewardPerToken(address _rewardsToken, uint256 _supply) internal view returns (uint256) {\\r\\n        if (_supply == 0) {\\r\\n            return rewardData[_rewardsToken].rewardPerTokenStored;\\r\\n        }\\r\\n        return\\r\\n            rewardData[_rewardsToken].rewardPerTokenStored.add(\\r\\n                lastTimeRewardApplicable(_rewardsToken).sub(rewardData[_rewardsToken].lastUpdateTime).mul(rewardData[_rewardsToken].rewardRate).mul(1e18).div(_supply)\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function _earned(\\r\\n        address _user,\\r\\n        address _rewardsToken,\\r\\n        uint256 _balance,\\r\\n        uint256 supply\\r\\n    ) internal view returns (uint256) {\\r\\n        return _balance.mul(_rewardPerToken(_rewardsToken, supply).sub(userRewardPerTokenPaid[_user][_rewardsToken])).div(1e18).add(rewards[_user][_rewardsToken]);\\r\\n    }\\r\\n\\r\\n    function lastTimeRewardApplicable(address _rewardsToken) public view returns (uint256) {\\r\\n        return Math.min(block.timestamp, rewardData[_rewardsToken].periodFinish);\\r\\n    }\\r\\n\\r\\n    function rewardPerToken(address _rewardsToken) external view returns (uint256) {\\r\\n        uint256 supply = _rewardsToken == address(stakingToken) ? lockedSupply : totalSupply;\\r\\n        return _rewardPerToken(_rewardsToken, supply);\\r\\n    }\\r\\n\\r\\n    function getRewardForDuration(address _rewardsToken) external view returns (uint256) {\\r\\n        return rewardData[_rewardsToken].rewardRate.mul(rewardsDuration);\\r\\n    }\\r\\n\\r\\n    // Address and claimable amount of all reward tokens for the given account\\r\\n    function claimableRewards(address account) external view returns (RewardData[] memory _rewards) {\\r\\n        _rewards = new RewardData[](rewardTokens.length);\\r\\n        for (uint256 i = 0; i < _rewards.length; i++) {\\r\\n            // If i == 0 this is the stakingReward, distribution is based on locked balances\\r\\n            uint256 balance = i == 0 ? balances[account].locked : balances[account].total;\\r\\n            uint256 supply = i == 0 ? lockedSupply : totalSupply;\\r\\n            _rewards[i].token = rewardTokens[i];\\r\\n            _rewards[i].amount = _earned(account, _rewards[i].token, balance, supply);\\r\\n        }\\r\\n        return _rewards;\\r\\n    }\\r\\n\\r\\n    // Total balance of an account, including unlocked, locked and earned tokens\\r\\n    function totalBalance(address user) external view returns (uint256 amount) {\\r\\n        return balances[user].total;\\r\\n    }\\r\\n\\r\\n    // Total withdrawable balance for an account to which no penalty is applied\\r\\n    function unlockedBalance(address user) external view returns (uint256 amount) {\\r\\n        amount = balances[user].unlocked;\\r\\n        LockedBalance[] storage earnings = userEarnings[msg.sender];\\r\\n        for (uint256 i = 0; i < earnings.length; i++) {\\r\\n            if (earnings[i].unlockTime > block.timestamp) {\\r\\n                break;\\r\\n            }\\r\\n            amount = amount.add(earnings[i].amount);\\r\\n        }\\r\\n        return amount;\\r\\n    }\\r\\n\\r\\n    // Information on the \\\"earned\\\" balances of a user\\r\\n    // Earned balances may be withdrawn immediately for a 50% penalty\\r\\n    function earnedBalances(address user) external view returns (uint256 total, LockedBalance[] memory earningsData) {\\r\\n        LockedBalance[] storage earnings = userEarnings[user];\\r\\n        uint256 idx;\\r\\n        for (uint256 i = 0; i < earnings.length; i++) {\\r\\n            if (earnings[i].unlockTime > block.timestamp) {\\r\\n                if (idx == 0) {\\r\\n                    earningsData = new LockedBalance[](earnings.length - i);\\r\\n                }\\r\\n                earningsData[idx] = earnings[i];\\r\\n                idx++;\\r\\n                total = total.add(earnings[i].amount);\\r\\n            }\\r\\n        }\\r\\n        return (total, earningsData);\\r\\n    }\\r\\n\\r\\n    // Information on a user's locked balances\\r\\n    function lockedBalances(address user)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 total,\\r\\n            uint256 unlockable,\\r\\n            uint256 locked,\\r\\n            LockedBalance[] memory lockData\\r\\n        )\\r\\n    {\\r\\n        LockedBalance[] storage locks = userLocks[user];\\r\\n        uint256 idx;\\r\\n        for (uint256 i = 0; i < locks.length; i++) {\\r\\n            if (locks[i].unlockTime > block.timestamp) {\\r\\n                if (idx == 0) {\\r\\n                    lockData = new LockedBalance[](locks.length - i);\\r\\n                }\\r\\n                lockData[idx] = locks[i];\\r\\n                idx++;\\r\\n                locked = locked.add(locks[i].amount);\\r\\n            } else {\\r\\n                unlockable = unlockable.add(locks[i].amount);\\r\\n            }\\r\\n        }\\r\\n        return (balances[user].locked, unlockable, locked, lockData);\\r\\n    }\\r\\n\\r\\n    // Final balance received and penalty balance paid by user upon calling exit\\r\\n    function withdrawableBalance(address user) public view returns (uint256 amount, uint256 penaltyAmount) {\\r\\n        Balances storage bal = balances[user];\\r\\n        if (bal.earned > 0) {\\r\\n            uint256 amountWithoutPenalty;\\r\\n            uint256 length = userEarnings[user].length;\\r\\n            for (uint256 i = 0; i < length; i++) {\\r\\n                uint256 earnedAmount = userEarnings[user][i].amount;\\r\\n                if (earnedAmount == 0) continue;\\r\\n                if (userEarnings[user][i].unlockTime > block.timestamp) {\\r\\n                    break;\\r\\n                }\\r\\n                amountWithoutPenalty = amountWithoutPenalty.add(earnedAmount);\\r\\n            }\\r\\n\\r\\n            penaltyAmount = bal.earned.sub(amountWithoutPenalty).div(2);\\r\\n        }\\r\\n        amount = bal.unlocked.add(bal.earned).sub(penaltyAmount);\\r\\n        return (amount, penaltyAmount);\\r\\n    }\\r\\n\\r\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\r\\n\\r\\n    // Stake tokens to receive rewards\\r\\n    // Locked tokens cannot be withdrawn for lockDuration and are eligible to receive stakingReward rewards\\r\\n    function stake(uint256 amount, bool lock) external nonReentrant updateReward(msg.sender) {\\r\\n        require(amount > 0, \\\"MultiFeeDistribution::stake: Cannot stake 0\\\");\\r\\n        totalSupply = totalSupply.add(amount);\\r\\n        Balances storage bal = balances[msg.sender];\\r\\n        bal.total = bal.total.add(amount);\\r\\n        if (lock) {\\r\\n            lockedSupply = lockedSupply.add(amount);\\r\\n            bal.locked = bal.locked.add(amount);\\r\\n            uint256 unlockTime = block.timestamp.div(rewardsDuration).mul(rewardsDuration).add(lockDuration);\\r\\n            uint256 idx = userLocks[msg.sender].length;\\r\\n            if (idx == 0 || userLocks[msg.sender][idx - 1].unlockTime < unlockTime) {\\r\\n                userLocks[msg.sender].push(LockedBalance({amount: amount, unlockTime: unlockTime}));\\r\\n            } else {\\r\\n                userLocks[msg.sender][idx - 1].amount = userLocks[msg.sender][idx - 1].amount.add(amount);\\r\\n            }\\r\\n        } else {\\r\\n            bal.unlocked = bal.unlocked.add(amount);\\r\\n        }\\r\\n        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\\r\\n        emit Staked(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    // Mint new tokens\\r\\n    // Minted tokens receive rewards normally but incur a 50% penalty when\\r\\n    // withdrawn before lockDuration has passed.\\r\\n    function mint(address user, uint256 amount) external updateReward(user) {\\r\\n        require(minters[msg.sender], \\\"MultiFeeDistribution::mint: Only minters allowed\\\");\\r\\n        totalSupply = totalSupply.add(amount);\\r\\n        Balances storage bal = balances[user];\\r\\n        bal.total = bal.total.add(amount);\\r\\n        bal.earned = bal.earned.add(amount);\\r\\n        uint256 unlockTime = block.timestamp.div(rewardsDuration).mul(rewardsDuration).add(lockDuration);\\r\\n        LockedBalance[] storage earnings = userEarnings[user];\\r\\n        uint256 idx = earnings.length;\\r\\n\\r\\n        if (idx == 0 || earnings[idx - 1].unlockTime < unlockTime) {\\r\\n            earnings.push(LockedBalance({amount: amount, unlockTime: unlockTime}));\\r\\n        } else {\\r\\n            earnings[idx - 1].amount = earnings[idx - 1].amount.add(amount);\\r\\n        }\\r\\n        stakingTokenReserve.transfer(address(this), amount);\\r\\n        emit Staked(user, amount);\\r\\n    }\\r\\n\\r\\n    // Withdraw staked tokens\\r\\n    // First withdraws unlocked tokens, then earned tokens. Withdrawing earned tokens\\r\\n    // incurs a 50% penalty which is distributed based on locked balances.\\r\\n    function withdraw(uint256 amount) public nonReentrant updateReward(msg.sender) {\\r\\n        require(amount > 0, \\\"MultiFeeDistribution::withdraw: Cannot withdraw 0\\\");\\r\\n        Balances storage bal = balances[msg.sender];\\r\\n        uint256 penaltyAmount;\\r\\n\\r\\n        if (amount <= bal.unlocked) {\\r\\n            bal.unlocked = bal.unlocked.sub(amount);\\r\\n        } else {\\r\\n            uint256 remaining = amount.sub(bal.unlocked);\\r\\n            require(bal.earned >= remaining, \\\"MultiFeeDistribution::withdraw: Insufficient unlocked balance\\\");\\r\\n            bal.unlocked = 0;\\r\\n            bal.earned = bal.earned.sub(remaining);\\r\\n            for (uint256 i = 0; ; i++) {\\r\\n                uint256 earnedAmount = userEarnings[msg.sender][i].amount;\\r\\n                if (earnedAmount == 0) continue;\\r\\n                if (penaltyAmount == 0 && userEarnings[msg.sender][i].unlockTime > block.timestamp) {\\r\\n                    penaltyAmount = remaining;\\r\\n                    require(bal.earned >= remaining, \\\"MultiFeeDistribution::withdraw: Insufficient balance after penalty\\\");\\r\\n                    bal.earned = bal.earned.sub(remaining);\\r\\n                    if (bal.earned == 0) {\\r\\n                        delete userEarnings[msg.sender];\\r\\n                        break;\\r\\n                    }\\r\\n                    remaining = remaining.mul(2);\\r\\n                }\\r\\n                if (remaining <= earnedAmount) {\\r\\n                    userEarnings[msg.sender][i].amount = earnedAmount.sub(remaining);\\r\\n                    break;\\r\\n                } else {\\r\\n                    delete userEarnings[msg.sender][i];\\r\\n                    remaining = remaining.sub(earnedAmount);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint256 adjustedAmount = amount.add(penaltyAmount);\\r\\n        bal.total = bal.total.sub(adjustedAmount);\\r\\n        totalSupply = totalSupply.sub(adjustedAmount);\\r\\n        stakingToken.safeTransfer(msg.sender, amount);\\r\\n        if (penaltyAmount > 0) {\\r\\n            _notifyReward(address(stakingToken), penaltyAmount);\\r\\n        }\\r\\n        emit Withdrawn(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    // Claim all pending staking rewards\\r\\n    function getReward() public nonReentrant updateReward(msg.sender) {\\r\\n        for (uint256 i; i < rewardTokens.length; i++) {\\r\\n            address _rewardToken = rewardTokens[i];\\r\\n            uint256 reward = rewards[msg.sender][_rewardToken];\\r\\n            if (reward > 0) {\\r\\n                rewards[msg.sender][_rewardToken] = 0;\\r\\n                if (WethUtils.isWeth(_rewardToken)) {\\r\\n                    WethUtils.unwrap(reward);\\r\\n                    Address.sendValue(payable(msg.sender), reward);\\r\\n                } else {\\r\\n                    IERC20(_rewardToken).safeTransfer(msg.sender, reward);\\r\\n                }\\r\\n                emit RewardPaid(msg.sender, _rewardToken, reward);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Withdraw full unlocked balance and claim pending rewards\\r\\n    function emergencyWithdraw() external updateReward(msg.sender) {\\r\\n        (uint256 amount, uint256 penaltyAmount) = withdrawableBalance(msg.sender);\\r\\n        delete userEarnings[msg.sender];\\r\\n        Balances storage bal = balances[msg.sender];\\r\\n        bal.total = bal.total.sub(bal.unlocked).sub(bal.earned);\\r\\n        bal.unlocked = 0;\\r\\n        bal.earned = 0;\\r\\n\\r\\n        totalSupply = totalSupply.sub(amount.add(penaltyAmount));\\r\\n        stakingToken.safeTransfer(msg.sender, amount);\\r\\n        if (penaltyAmount > 0) {\\r\\n            _notifyReward(address(stakingToken), penaltyAmount);\\r\\n        }\\r\\n        getReward();\\r\\n    }\\r\\n\\r\\n    // Withdraw all currently locked tokens where the unlock time has passed\\r\\n    function withdrawExpiredLocks() external {\\r\\n        LockedBalance[] storage locks = userLocks[msg.sender];\\r\\n        Balances storage bal = balances[msg.sender];\\r\\n        uint256 amount;\\r\\n        uint256 length = locks.length;\\r\\n        if (locks[length - 1].unlockTime <= block.timestamp) {\\r\\n            amount = bal.locked;\\r\\n            delete userLocks[msg.sender];\\r\\n        } else {\\r\\n            for (uint256 i = 0; i < length; i++) {\\r\\n                if (locks[i].unlockTime > block.timestamp) break;\\r\\n                amount = amount.add(locks[i].amount);\\r\\n                delete locks[i];\\r\\n            }\\r\\n        }\\r\\n        bal.locked = bal.locked.sub(amount);\\r\\n        bal.total = bal.total.sub(amount);\\r\\n        totalSupply = totalSupply.sub(amount);\\r\\n        lockedSupply = lockedSupply.sub(amount);\\r\\n        stakingToken.safeTransfer(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\r\\n\\r\\n    function _notifyReward(address _rewardsToken, uint256 reward) internal {\\r\\n        if (block.timestamp >= rewardData[_rewardsToken].periodFinish) {\\r\\n            rewardData[_rewardsToken].rewardRate = reward.div(rewardsDuration);\\r\\n        } else {\\r\\n            uint256 remaining = rewardData[_rewardsToken].periodFinish.sub(block.timestamp);\\r\\n            uint256 leftover = remaining.mul(rewardData[_rewardsToken].rewardRate);\\r\\n            rewardData[_rewardsToken].rewardRate = reward.add(leftover).div(rewardsDuration);\\r\\n        }\\r\\n\\r\\n        rewardData[_rewardsToken].lastUpdateTime = block.timestamp;\\r\\n        rewardData[_rewardsToken].periodFinish = block.timestamp.add(rewardsDuration);\\r\\n    }\\r\\n\\r\\n    function notifyRewardAmount(address _rewardsToken, uint256 reward) external updateReward(address(0)) {\\r\\n        require(rewardDistributors[_rewardsToken][msg.sender], \\\"MultiFeeDistribution::notifyRewardAmount: Only reward distributors allowed\\\");\\r\\n        require(reward > 0, \\\"MultiFeeDistribution::notifyRewardAmount: No reward\\\");\\r\\n        // handle the transfer of reward tokens via `transferFrom` to reduce the number\\r\\n        // of transactions required and ensure correctness of the reward amount\\r\\n        IERC20(_rewardsToken).safeTransferFrom(msg.sender, address(this), reward);\\r\\n        _notifyReward(_rewardsToken, reward);\\r\\n        emit RewardAdded(reward);\\r\\n    }\\r\\n\\r\\n    // Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders\\r\\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyOwner {\\r\\n        require(tokenAddress != address(stakingToken), \\\"MultiFeeDistribution::recoverERC20: Cannot withdraw staking token\\\");\\r\\n        require(rewardData[tokenAddress].lastUpdateTime == 0, \\\"MultiFeeDistribution::recoverERC20: Cannot withdraw reward token\\\");\\r\\n        IERC20(tokenAddress).safeTransfer(owner(), tokenAmount);\\r\\n        emit Recovered(tokenAddress, tokenAmount);\\r\\n    }\\r\\n\\r\\n    /* ========== MODIFIERS ========== */\\r\\n\\r\\n    modifier updateReward(address account) {\\r\\n        address token = address(stakingToken);\\r\\n        uint256 balance;\\r\\n        uint256 supply = lockedSupply;\\r\\n        rewardData[token].rewardPerTokenStored = _rewardPerToken(token, supply);\\r\\n        rewardData[token].lastUpdateTime = lastTimeRewardApplicable(token);\\r\\n        if (account != address(0)) {\\r\\n            // Special case, use the locked balances and supply for stakingReward rewards\\r\\n            rewards[account][token] = _earned(account, token, balances[account].locked, supply);\\r\\n            userRewardPerTokenPaid[account][token] = rewardData[token].rewardPerTokenStored;\\r\\n            balance = balances[account].total;\\r\\n        }\\r\\n\\r\\n        supply = totalSupply;\\r\\n        for (uint256 i = 1; i < rewardTokens.length; i++) {\\r\\n            token = rewardTokens[i];\\r\\n            rewardData[token].rewardPerTokenStored = _rewardPerToken(token, supply);\\r\\n            rewardData[token].lastUpdateTime = lastTimeRewardApplicable(token);\\r\\n            if (account != address(0)) {\\r\\n                rewards[account][token] = _earned(account, token, balance, supply);\\r\\n                userRewardPerTokenPaid[account][token] = rewardData[token].rewardPerTokenStored;\\r\\n            }\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice fallback for payable -> required to unwrap WETH\\r\\n    receive() external payable {}\\r\\n\\r\\n    /* ========== EVENTS ========== */\\r\\n\\r\\n    event RewardAdded(uint256 reward);\\r\\n    event RewardTokenAdded(address indexed rewardTokenAddress);\\r\\n    event RewardDistributorApproved(address indexed rewardAddress, address indexed distributor, bool approved);\\r\\n    event Staked(address indexed user, uint256 amount);\\r\\n    event Withdrawn(address indexed user, uint256 amount);\\r\\n    event RewardPaid(address indexed user, address indexed rewardsToken, uint256 reward);\\r\\n    event Recovered(address token, uint256 amount);\\r\\n}\\r\\n\",\"keccak256\":\"0xb0f8c3b2611da64797adc58383f676e1a98a9534ce739b7cf6448cf37d7f682c\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IWETH is IERC20 {\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function withdraw(uint256 wad) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xf98652584ed5134c7f7dd6be73ed0987cc812ea8f0ffde7ad9267d682959be56\",\"license\":\"MIT\"},\"contracts/interfaces/IYToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IYToken is IERC20 {\\r\\n    function burn(uint256 _amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xcf536e2b997d94442ec7d06cf1acab95b2e55612c42837df71179aba0726cf74\",\"license\":\"MIT\"},\"contracts/interfaces/IYTokenReserve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.4;\\r\\n\\r\\ninterface IYTokenReserve {\\r\\n    function transfer(address _address, uint256 _amount) external;\\r\\n\\r\\n    function setRewarder(address _rewarder) external returns (bool);\\r\\n\\r\\n    function setPool(address _pool) external returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x9c296a27efa1891c10ce66cf681b24ee2280567abe87e925419f30470a4f16ba\",\"license\":\"MIT\"},\"contracts/libs/WethUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.4;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"../interfaces/IWETH.sol\\\";\\r\\n\\r\\nlibrary WethUtils {\\r\\n    using SafeERC20 for IWETH;\\r\\n\\r\\n    IWETH public constant weth = IWETH(0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83); //WFTM\\r\\n\\r\\n    function isWeth(address token) internal pure returns (bool) {\\r\\n        return address(weth) == token;\\r\\n    }\\r\\n\\r\\n    function wrap(uint256 amount) internal {\\r\\n        weth.deposit{value: amount}();\\r\\n    }\\r\\n\\r\\n    function unwrap(uint256 amount) internal {\\r\\n        weth.withdraw(amount);\\r\\n    }\\r\\n\\r\\n    function transfer(address to, uint256 amount) internal {\\r\\n        weth.safeTransfer(to, amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1028ebc599bc81ea3d442eb19cd387dfb6bc89b67ad36b7ca8746df63f3d613a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162003f9138038062003f918339810160408190526200003491620002a5565b6001600055620000443362000236565b600280546001600160a01b038581166001600160a01b031992831617909255600380549285169290911682179055604051630e9918b960e21b8152306004820152633a6462e490602401602060405180830381600087803b158015620000a957600080fd5b505af1158015620000be573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000e49190620003a1565b5060005b8151811015620001cb576001600660008484815181106200011957634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060078282815181106200017b57634e487b7160e01b600052603260045260246000fd5b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b0390921691909117905580620001c281620003ca565b915050620000e8565b505060048054600181019091557f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180546001600160a01b039093166001600160a01b0319909316831790555060009081526005602052604090204260028201819055905562000408565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b80516001600160a01b0381168114620002a057600080fd5b919050565b600080600060608486031215620002ba578283fd5b620002c58462000288565b92506020620002d681860162000288565b60408601519093506001600160401b0380821115620002f3578384fd5b818701915087601f83011262000307578384fd5b8151818111156200031c576200031c620003f2565b8060051b604051601f19603f83011681018181108582111715620003445762000344620003f2565b604052828152858101935084860182860187018c101562000363578788fd5b8795505b8386101562000390576200037b8162000288565b85526001959095019493860193860162000367565b508096505050505050509250925092565b600060208284031215620003b3578081fd5b81518015158114620003c3578182fd5b9392505050565b6000600019821415620003eb57634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fd5b613b7980620004186000396000f3fe6080604052600436106102085760003560e01c80637035ab9811610118578063bcd11014116100a0578063df3798761161006f578063df37987614610678578063e70b9e27146106a6578063f1229777146106de578063f2fde38b146106fe578063f46eccc41461071e57600080fd5b8063bcd1101414610600578063ca5c7b9114610620578063db2e21bc14610636578063dc01f60d1461064b57600080fd5b80638980f11f116100e75780638980f11f1461056d5780638da5cb5b1461058d578063a01c77bc146105ab578063abe50f19146105c0578063b66503cf146105e057600080fd5b80637035ab98146104e0578063715018a61461051857806372f702f31461052d5780637bb7bed11461054d57600080fd5b806340b47e1a1161019b5780635e0fac2e1161016a5780635e0fac2e1461042a578063638634ee1461044a5780636724c9101461046a5780636b61a1721461048a5780636eacd398146104aa57600080fd5b806340b47e1a1461035057806340c10f191461037057806341ac34e51461039057806348e5d9f8146103c857600080fd5b80632e1a7d4d116101d75780632e1a7d4d146102b7578063386a9525146102d957806339fc9713146102f05780633d18b9121461033b57600080fd5b806302b6293814610214578063045544431461024e5780630483a7f61461027157806318160ddd146102a157600080fd5b3661020f57005b600080fd5b34801561022057600080fd5b5061023461022f3660046137ac565b61074e565b604080519283526020830191909152015b60405180910390f35b34801561025a57600080fd5b506102636108bf565b604051908152602001610245565b34801561027d57600080fd5b5061029161028c3660046137ac565b6108d0565b6040516102459493929190613a3b565b3480156102ad57600080fd5b50610263600b5481565b3480156102c357600080fd5b506102d76102d2366004613883565b610af5565b005b3480156102e557600080fd5b5061026362093a8081565b3480156102fc57600080fd5b5061032b61030b3660046137c6565b600860209081526000928352604080842090915290825290205460ff1681565b6040519015158152602001610245565b34801561034757600080fd5b506102d761114c565b34801561035c57600080fd5b506102d761036b3660046137c6565b6114a8565b34801561037c57600080fd5b506102d761038b36600461383e565b61164b565b34801561039c57600080fd5b506103b06103ab366004613883565b611b13565b6040516001600160a01b039091168152602001610245565b3480156103d457600080fd5b5061040a6103e33660046137ac565b60056020526000908152604090208054600182015460028301546003909301549192909184565b604080519485526020850193909352918301526060820152608001610245565b34801561043657600080fd5b506102636104453660046137ac565b611b3d565b34801561045657600080fd5b506102636104653660046137ac565b611c06565b34801561047657600080fd5b506102d76104853660046137f8565b611c30565b34801561049657600080fd5b506003546103b0906001600160a01b031681565b3480156104b657600080fd5b506102636104c53660046137ac565b6001600160a01b03166000908152600d602052604090205490565b3480156104ec57600080fd5b506102636104fb3660046137c6565b600960209081526000928352604080842090915290825290205481565b34801561052457600080fd5b506102d7611d55565b34801561053957600080fd5b506002546103b0906001600160a01b031681565b34801561055957600080fd5b506103b0610568366004613883565b611d8b565b34801561057957600080fd5b506102d761058836600461383e565b611d9b565b34801561059957600080fd5b506001546001600160a01b03166103b0565b3480156105b757600080fd5b506102d7611f50565b3480156105cc57600080fd5b506102d76105db36600461389b565b6120ee565b3480156105ec57600080fd5b506102d76105fb36600461383e565b612579565b34801561060c57600080fd5b5061026361061b3660046137ac565b6128e6565b34801561062c57600080fd5b50610263600c5481565b34801561064257600080fd5b506102d761290f565b34801561065757600080fd5b5061066b6106663660046137ac565b612bcc565b604051610245919061392b565b34801561068457600080fd5b506106986106933660046137ac565b612dac565b604051610245929190613a22565b3480156106b257600080fd5b506102636106c13660046137c6565b600a60209081526000928352604080842090915290825290205481565b3480156106ea57600080fd5b506102636106f93660046137ac565b612f53565b34801561070a57600080fd5b506102d76107193660046137ac565b612f8c565b34801561072a57600080fd5b5061032b6107393660046137ac565b60066020526000908152604090205460ff1681565b6001600160a01b0381166000908152600d60205260408120600381015482919015610892576001600160a01b0384166000908152600f6020526040812054815b8181101561086a576001600160a01b0387166000908152600f602052604081208054839081106107ce57634e487b7160e01b600052603260045260246000fd5b906000526020600020906002020160000154905080600014156107f15750610858565b6001600160a01b0388166000908152600f6020526040902080544291908490811061082c57634e487b7160e01b600052603260045260246000fd5b906000526020600020906002020160010154111561084a575061086a565b6108548482613027565b9350505b8061086281613b04565b91505061078e565b5061088d600261088784866003015461303390919063ffffffff16565b9061303f565b935050505b6108b7826108b18360030154846001015461302790919063ffffffff16565b90613033565b925050915091565b6108cd62093a806008613aa2565b81565b6001600160a01b0381166000908152600e602052604081208190819060609082805b8254811015610acd574283828154811061091c57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060020201600101541115610a7d57816109b5578254610946908290613ac1565b67ffffffffffffffff81111561096c57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156109b157816020015b604080518082019091526000808252602082015281526020019060019003908161098a5790505b5093505b8281815481106109d557634e487b7160e01b600052603260045260246000fd5b906000526020600020906002020160405180604001604052908160008201548152602001600182015481525050848381518110610a2257634e487b7160e01b600052603260045260246000fd5b60200260200101819052508180610a3890613b04565b925050610a76838281548110610a5e57634e487b7160e01b600052603260045260246000fd5b60009182526020909120600290910201548690613027565b9450610abb565b610ab8838281548110610aa057634e487b7160e01b600052603260045260246000fd5b60009182526020909120600290910201548790613027565b95505b80610ac581613b04565b9150506108f2565b5050506001600160a01b0385166000908152600d602052604090206002015493509193509193565b60026000541415610b215760405162461bcd60e51b8152600401610b18906139eb565b60405180910390fd5b600260008181559054600c5433926001600160a01b039092169190610b46838261304b565b6001600160a01b038416600090815260056020526040902060030155610b6b83611c06565b6001600160a01b03808516600090815260056020526040902060020191909155841615610c17576001600160a01b0384166000908152600d6020526040902060020154610bbc9085908590846130e0565b6001600160a01b038086166000818152600a602090815260408083209489168084529482528083209590955560058152848220600301548383526009825285832094835293815284822093909355908152600d909152205491505b50600b5460015b600454811015610d215760048181548110610c4957634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03169350610c6a848361304b565b6001600160a01b038516600090815260056020526040902060030155610c8f84611c06565b6001600160a01b03808616600090815260056020526040902060020191909155851615610d0f57610cc2858585856130e0565b6001600160a01b038087166000818152600a60209081526040808320948a168084529482528083209590955560058152848220600301549282526009815284822093825292909252919020555b80610d1981613b04565b915050610c1e565b5060008511610d8c5760405162461bcd60e51b815260206004820152603160248201527f4d756c7469466565446973747269627574696f6e3a3a77697468647261773a20604482015270043616e6e6f74207769746864726177203607c1b6064820152608401610b18565b336000908152600d6020526040812060018101549091908711610dc2576001820154610db89088613033565b60018301556110a8565b6000610ddb83600101548961303390919063ffffffff16565b90508083600301541015610e575760405162461bcd60e51b815260206004820152603d60248201527f4d756c7469466565446973747269627574696f6e3a3a77697468647261773a2060448201527f496e73756666696369656e7420756e6c6f636b65642062616c616e63650000006064820152608401610b18565b600060018401556003830154610e6d9082613033565b600384015560005b336000908152600f60205260408120805483908110610ea457634e487b7160e01b600052603260045260246000fd5b90600052602060002090600202016000015490508060001415610ec75750611093565b83158015610f165750336000908152600f60205260409020805442919084908110610f0257634e487b7160e01b600052603260045260246000fd5b906000526020600020906002020160010154115b15610fe9578293508285600301541015610fa35760405162461bcd60e51b815260206004820152604260248201527f4d756c7469466565446973747269627574696f6e3a3a77697468647261773a2060448201527f496e73756666696369656e742062616c616e63652061667465722070656e616c606482015261747960f01b608482015260a401610b18565b6003850154610fb29084613033565b60038601819055610fdb57336000908152600f60205260408120610fd591613755565b506110a5565b610fe6836002613152565b92505b80831161104057610ffa8184613033565b336000908152600f6020526040902080548490811061102957634e487b7160e01b600052603260045260246000fd5b6000918252602090912060029091020155506110a5565b336000908152600f6020526040902080548390811061106f57634e487b7160e01b600052603260045260246000fd5b6000918252602082206002909102018181556001015561108f8382613033565b9250505b8061109d81613b04565b915050610e75565b50505b60006110b48883613027565b83549091506110c39082613033565b8355600b546110d29082613033565b600b556002546110ec906001600160a01b0316338a61315e565b811561110857600254611108906001600160a01b0316836131c6565b60405188815233907f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d59060200160405180910390a250506001600055505050505050565b6002600054141561116f5760405162461bcd60e51b8152600401610b18906139eb565b600260008181559054600c5433926001600160a01b039092169190611194838261304b565b6001600160a01b0384166000908152600560205260409020600301556111b983611c06565b6001600160a01b03808516600090815260056020526040902060020191909155841615611265576001600160a01b0384166000908152600d602052604090206002015461120a9085908590846130e0565b6001600160a01b038086166000818152600a602090815260408083209489168084529482528083209590955560058152848220600301548383526009825285832094835293815284822093909355908152600d909152205491505b50600b5460015b60045481101561136f576004818154811061129757634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031693506112b8848361304b565b6001600160a01b0385166000908152600560205260409020600301556112dd84611c06565b6001600160a01b0380861660009081526005602052604090206002019190915585161561135d57611310858585856130e0565b6001600160a01b038087166000818152600a60209081526040808320948a168084529482528083209590955560058152848220600301549282526009815284822093825292909252919020555b8061136781613b04565b91505061126c565b5060005b60045481101561149c576000600482815481106113a057634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910154338352600a825260408084206001600160a01b0390921680855291909252912054909150801561148757336000908152600a602090815260408083206001600160a01b03861680855292528220919091557321be370d5312f44cb42ce377bc9b8a0cef1a4c83141561143257611423816132e1565b61142d3382613349565b611446565b6114466001600160a01b038316338361315e565b6040518181526001600160a01b0383169033907f540798df468d7b23d11f156fdb954cb19ad414d150722a7b6d55ba369dea792e9060200160405180910390a35b5050808061149490613b04565b915050611373565b50506001600055505050565b6001546001600160a01b031633146114d25760405162461bcd60e51b8152600401610b18906139b6565b6001600160a01b0382166000908152600560205260409020600201541561154c5760405162461bcd60e51b815260206004820152602860248201527f4d756c7469466565446973747269627574696f6e3a3a6164645265776172643a60448201526708125b9d985b1a5960c21b6064820152608401610b18565b6004805460018082019092557f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180546001600160a01b0319166001600160a01b03858116918217909255600081815260056020908152604080832042600282018190559055600882528083209487168352939052828120805460ff1916909417909355905190917ff3e4c2c64e71e6ba2eaab9a599bced62f9eb91d2cda610bf41aa8c80ff2cf82691a2806001600160a01b0316826001600160a01b03167fd890240fb430b9ed4ff1d263f43a0a2922d16349b3d2d71015f86a3e1d3e8848600160405161163f911515815260200190565b60405180910390a35050565b600254600c5483916001600160a01b03169060009061166a838261304b565b6001600160a01b03841660009081526005602052604090206003015561168f83611c06565b6001600160a01b0380851660009081526005602052604090206002019190915584161561173b576001600160a01b0384166000908152600d60205260409020600201546116e09085908590846130e0565b6001600160a01b038086166000818152600a602090815260408083209489168084529482528083209590955560058152848220600301548383526009825285832094835293815284822093909355908152600d909152205491505b50600b5460015b600454811015611845576004818154811061176d57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316935061178e848361304b565b6001600160a01b0385166000908152600560205260409020600301556117b384611c06565b6001600160a01b03808616600090815260056020526040902060020191909155851615611833576117e6858585856130e0565b6001600160a01b038087166000818152600a60209081526040808320948a168084529482528083209590955560058152848220600301549282526009815284822093825292909252919020555b8061183d81613b04565b915050611742565b503360009081526006602052604090205460ff166118be5760405162461bcd60e51b815260206004820152603060248201527f4d756c7469466565446973747269627574696f6e3a3a6d696e743a204f6e6c7960448201526f081b5a5b9d195c9cc8185b1b1bddd95960821b6064820152608401610b18565b600b546118cb9086613027565b600b556001600160a01b0386166000908152600d6020526040902080546118f29087613027565b815560038101546119039087613027565b6003820155600061193861191b62093a806008613aa2565b61193262093a8061192c428261303f565b90613152565b90613027565b6001600160a01b0389166000908152600f6020526040902080549192509080158061199d5750828261196b600184613ac1565b8154811061198957634e487b7160e01b600052603260045260246000fd5b906000526020600020906002020160010154105b156119df576040805180820190915289815260208082018581528454600181810187556000878152939093209351600290910290930192835551910155611a60565b611a2489836119ef600185613ac1565b81548110611a0d57634e487b7160e01b600052603260045260246000fd5b600091825260209091206002909102015490613027565b82611a30600184613ac1565b81548110611a4e57634e487b7160e01b600052603260045260246000fd5b60009182526020909120600290910201555b60035460405163a9059cbb60e01b8152306004820152602481018b90526001600160a01b039091169063a9059cbb90604401600060405180830381600087803b158015611aac57600080fd5b505af1158015611ac0573d6000803e3d6000fd5b50505050896001600160a01b03167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d8a604051611aff91815260200190565b60405180910390a250505050505050505050565b60078181548110611b2357600080fd5b6000918252602090912001546001600160a01b0316905081565b6001600160a01b0381166000908152600d6020908152604080832060010154338452600f909252822090915b8154811015611bff5742828281548110611b9357634e487b7160e01b600052603260045260246000fd5b9060005260206000209060020201600101541115611bb057611bff565b611beb828281548110611bd357634e487b7160e01b600052603260045260246000fd5b60009182526020909120600290910201548490613027565b925080611bf781613b04565b915050611b69565b5050919050565b6001600160a01b038116600090815260056020526040812054611c2a904290613462565b92915050565b6001546001600160a01b03163314611c5a5760405162461bcd60e51b8152600401610b18906139b6565b6001600160a01b038316600090815260056020526040902060020154611ce85760405162461bcd60e51b815260206004820152603760248201527f4d756c7469466565446973747269627574696f6e3a3a617070726f766552657760448201527f6172644469737472696275746f723a20496e76616c69640000000000000000006064820152608401610b18565b6001600160a01b03838116600081815260086020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527fd890240fb430b9ed4ff1d263f43a0a2922d16349b3d2d71015f86a3e1d3e8848910160405180910390a3505050565b6001546001600160a01b03163314611d7f5760405162461bcd60e51b8152600401610b18906139b6565b611d896000613478565b565b60048181548110611b2357600080fd5b6001546001600160a01b03163314611dc55760405162461bcd60e51b8152600401610b18906139b6565b6002546001600160a01b0383811691161415611e535760405162461bcd60e51b815260206004820152604160248201527f4d756c7469466565446973747269627574696f6e3a3a7265636f76657245524360448201527f32303a2043616e6e6f74207769746864726177207374616b696e6720746f6b656064820152603760f91b608482015260a401610b18565b6001600160a01b03821660009081526005602052604090206002015415611ee4576040805162461bcd60e51b81526020600482015260248101919091527f4d756c7469466565446973747269627574696f6e3a3a7265636f76657245524360448201527f32303a2043616e6e6f742077697468647261772072657761726420746f6b656e6064820152608401610b18565b611f0a611ef96001546001600160a01b031690565b6001600160a01b038416908361315e565b604080516001600160a01b0384168152602081018390527f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28910160405180910390a15050565b336000908152600e60209081526040808320600d90925282208154919290914284611f7c600184613ac1565b81548110611f9a57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600202016001015411611fd7576002830154336000908152600e60205260408120919350611fd29190613755565b61208f565b60005b8181101561208d574285828154811061200357634e487b7160e01b600052603260045260246000fd5b90600052602060002090600202016001015411156120205761208d565b612043858281548110611bd357634e487b7160e01b600052603260045260246000fd5b925084818154811061206557634e487b7160e01b600052603260045260246000fd5b600091825260208220600290910201818155600101558061208581613b04565b915050611fda565b505b600283015461209e9083613033565b600284015582546120af9083613033565b8355600b546120be9083613033565b600b55600c546120ce9083613033565b600c556002546120e8906001600160a01b0316338461315e565b50505050565b600260005414156121115760405162461bcd60e51b8152600401610b18906139eb565b600260008181559054600c5433926001600160a01b039092169190612136838261304b565b6001600160a01b03841660009081526005602052604090206003015561215b83611c06565b6001600160a01b03808516600090815260056020526040902060020191909155841615612207576001600160a01b0384166000908152600d60205260409020600201546121ac9085908590846130e0565b6001600160a01b038086166000818152600a602090815260408083209489168084529482528083209590955560058152848220600301548383526009825285832094835293815284822093909355908152600d909152205491505b50600b5460015b600454811015612311576004818154811061223957634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316935061225a848361304b565b6001600160a01b03851660009081526005602052604090206003015561227f84611c06565b6001600160a01b038086166000908152600560205260409020600201919091558516156122ff576122b2858585856130e0565b6001600160a01b038087166000818152600a60209081526040808320948a168084529482528083209590955560058152848220600301549282526009815284822093825292909252919020555b8061230981613b04565b91505061220e565b50600086116123765760405162461bcd60e51b815260206004820152602b60248201527f4d756c7469466565446973747269627574696f6e3a3a7374616b653a2043616e60448201526a06e6f74207374616b6520360ac1b6064820152608401610b18565b600b546123839087613027565b600b55336000908152600d6020526040902080546123a19088613027565b8155851561250957600c546123b69088613027565b600c5560028101546123c89088613027565b600282015560006123e061191b62093a806008613aa2565b336000908152600e60205260409020549091508015806124495750336000908152600e602052604090208290612417600184613ac1565b8154811061243557634e487b7160e01b600052603260045260246000fd5b906000526020600020906002020160010154105b1561249857336000908152600e6020908152604080832081518083019092528c825281830186815281546001818101845592865293909420915160029093029091019182559151910155612502565b336000908152600e602052604090206124b8908a906119ef600185613ac1565b336000908152600e602052604090206124d2600184613ac1565b815481106124f057634e487b7160e01b600052603260045260246000fd5b60009182526020909120600290910201555b505061251e565b60018101546125189088613027565b60018201555b600254612536906001600160a01b031633308a6134ca565b60405187815233907f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d9060200160405180910390a2505060016000555050505050565b600254600c546000916001600160a01b0316908290612598838261304b565b6001600160a01b0384166000908152600560205260409020600301556125bd83611c06565b6001600160a01b03808516600090815260056020526040902060020191909155841615612669576001600160a01b0384166000908152600d602052604090206002015461260e9085908590846130e0565b6001600160a01b038086166000818152600a602090815260408083209489168084529482528083209590955560058152848220600301548383526009825285832094835293815284822093909355908152600d909152205491505b50600b5460015b600454811015612773576004818154811061269b57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031693506126bc848361304b565b6001600160a01b0385166000908152600560205260409020600301556126e184611c06565b6001600160a01b0380861660009081526005602052604090206002019190915585161561276157612714858585856130e0565b6001600160a01b038087166000818152600a60209081526040808320948a168084529482528083209590955560058152848220600301549282526009815284822093825292909252919020555b8061276b81613b04565b915050612670565b506001600160a01b038616600090815260086020908152604080832033845290915290205460ff166128205760405162461bcd60e51b815260206004820152604a60248201527f4d756c7469466565446973747269627574696f6e3a3a6e6f746966795265776160448201527f7264416d6f756e743a204f6e6c7920726577617264206469737472696275746f6064820152691c9cc8185b1b1bddd95960b21b608482015260a401610b18565b6000851161288c5760405162461bcd60e51b815260206004820152603360248201527f4d756c7469466565446973747269627574696f6e3a3a6e6f74696679526577616044820152721c99105b5bdd5b9d0e88139bc81c995dd85c99606a1b6064820152608401610b18565b6128a16001600160a01b0387163330886134ca565b6128ab86866131c6565b6040518581527fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d9060200160405180910390a1505050505050565b6001600160a01b038116600090815260056020526040812060010154611c2a9062093a80613152565b600254600c5433916001600160a01b03169060009061292e838261304b565b6001600160a01b03841660009081526005602052604090206003015561295383611c06565b6001600160a01b038085166000908152600560205260409020600201919091558416156129ff576001600160a01b0384166000908152600d60205260409020600201546129a49085908590846130e0565b6001600160a01b038086166000818152600a602090815260408083209489168084529482528083209590955560058152848220600301548383526009825285832094835293815284822093909355908152600d909152205491505b50600b5460015b600454811015612b095760048181548110612a3157634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03169350612a52848361304b565b6001600160a01b038516600090815260056020526040902060030155612a7784611c06565b6001600160a01b03808616600090815260056020526040902060020191909155851615612af757612aaa858585856130e0565b6001600160a01b038087166000818152600a60209081526040808320948a168084529482528083209590955560058152848220600301549282526009815284822093825292909252919020555b80612b0181613b04565b915050612a06565b50600080612b163361074e565b336000908152600f60205260408120929450909250612b359190613755565b336000908152600d60205260409020600381015460018201548254612b5f92916108b19190613033565b81556000600182018190556003820155612b85612b7c8484613027565b600b5490613033565b600b55600254612b9f906001600160a01b0316338561315e565b8115612bbb57600254612bbb906001600160a01b0316836131c6565b612bc361114c565b50505050505050565b60045460609067ffffffffffffffff811115612bf857634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612c3d57816020015b6040805180820190915260008082526020820152815260200190600190039081612c165790505b50905060005b8151811015612da65760008115612c72576001600160a01b0384166000908152600d6020526040902054612c8f565b6001600160a01b0384166000908152600d60205260409020600201545b905060008215612ca157600b54612ca5565b600c545b905060048381548110612cc857634e487b7160e01b600052603260045260246000fd5b9060005260206000200160009054906101000a90046001600160a01b0316848481518110612d0657634e487b7160e01b600052603260045260246000fd5b6020026020010151600001906001600160a01b031690816001600160a01b031681525050612d6185858581518110612d4e57634e487b7160e01b600052603260045260246000fd5b60200260200101516000015184846130e0565b848481518110612d8157634e487b7160e01b600052603260045260246000fd5b6020026020010151602001818152505050508080612d9e90613b04565b915050612c43565b50919050565b6001600160a01b0381166000908152600f6020526040812060609082805b8254811015612f4b5742838281548110612df457634e487b7160e01b600052603260045260246000fd5b9060005260206000209060020201600101541115612f395781612e8d578254612e1e908290613ac1565b67ffffffffffffffff811115612e4457634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612e8957816020015b6040805180820190915260008082526020820152815260200190600190039081612e625790505b5093505b828181548110612ead57634e487b7160e01b600052603260045260246000fd5b906000526020600020906002020160405180604001604052908160008201548152602001600182015481525050848381518110612efa57634e487b7160e01b600052603260045260246000fd5b60200260200101819052508180612f1090613b04565b925050612f36838281548110610a5e57634e487b7160e01b600052603260045260246000fd5b94505b80612f4381613b04565b915050612dca565b505050915091565b60025460009081906001600160a01b03848116911614612f7557600b54612f79565b600c545b9050612f85838261304b565b9392505050565b6001546001600160a01b03163314612fb65760405162461bcd60e51b8152600401610b18906139b6565b6001600160a01b03811661301b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610b18565b61302481613478565b50565b6000612f858284613a6a565b6000612f858284613ac1565b6000612f858284613a82565b60008161307457506001600160a01b038216600090815260056020526040902060030154611c2a565b6001600160a01b03831660009081526005602052604090206001810154600290910154612f85916130be91859161088791670de0b6b3a76400009161192c9182906108b18c611c06565b6001600160a01b03851660009081526005602052604090206003015490613027565b6001600160a01b038085166000818152600a60209081526040808320948816808452948252808320549383526009825280832094835293905291822054613149919061193290670de0b6b3a76400009061088790613142906108b18b8a61304b565b8890613152565b95945050505050565b6000612f858284613aa2565b6040516001600160a01b0383166024820152604481018290526131c190849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613502565b505050565b6001600160a01b0382166000908152600560205260409020544210613213576131f28162093a8061303f565b6001600160a01b038316600090815260056020526040902060010155613293565b6001600160a01b0382166000908152600560205260408120546132369042613033565b6001600160a01b03841660009081526005602052604081206001015491925090613261908390613152565b905061327462093a806108878584613027565b6001600160a01b03851660009081526005602052604090206001015550505b6001600160a01b03821660009081526005602052604090204260029091018190556132c19062093a80613027565b6001600160a01b0390921660009081526005602052604090209190915550565b604051632e1a7d4d60e01b8152600481018290527321be370d5312f44cb42ce377bc9b8a0cef1a4c8390632e1a7d4d90602401600060405180830381600087803b15801561332e57600080fd5b505af1158015613342573d6000803e3d6000fd5b5050505050565b804710156133995760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610b18565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146133e6576040519150601f19603f3d011682016040523d82523d6000602084013e6133eb565b606091505b50509050806131c15760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610b18565b60008183106134715781612f85565b5090919050565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040516001600160a01b03808516602483015283166044820152606481018290526120e89085906323b872dd60e01b9060840161318a565b6000613557826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166135d49092919063ffffffff16565b8051909150156131c157808060200190518101906135759190613867565b6131c15760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610b18565b60606135e384846000856135eb565b949350505050565b60608247101561364c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610b18565b6001600160a01b0385163b6136a35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610b18565b600080866001600160a01b031685876040516136bf919061390f565b60006040518083038185875af1925050503d80600081146136fc576040519150601f19603f3d011682016040523d82523d6000602084013e613701565b606091505b509150915061371182828661371c565b979650505050505050565b6060831561372b575081612f85565b82511561373b5782518084602001fd5b8160405162461bcd60e51b8152600401610b189190613983565b508054600082556002029060005260206000209081019061302491905b8082111561378c5760008082556001820155600201613772565b5090565b80356001600160a01b03811681146137a757600080fd5b919050565b6000602082840312156137bd578081fd5b612f8582613790565b600080604083850312156137d8578081fd5b6137e183613790565b91506137ef60208401613790565b90509250929050565b60008060006060848603121561380c578081fd5b61381584613790565b925061382360208501613790565b9150604084013561383381613b35565b809150509250925092565b60008060408385031215613850578182fd5b61385983613790565b946020939093013593505050565b600060208284031215613878578081fd5b8151612f8581613b35565b600060208284031215613894578081fd5b5035919050565b600080604083850312156138ad578182fd5b8235915060208301356138bf81613b35565b809150509250929050565b6000815180845260208085019450808401835b838110156139045781518051885283015183880152604090960195908201906001016138dd565b509495945050505050565b60008251613921818460208701613ad8565b9190910192915050565b602080825282518282018190526000919060409081850190868401855b8281101561397657815180516001600160a01b03168552860151868501529284019290850190600101613948565b5091979650505050505050565b60208152600082518060208401526139a2816040850160208701613ad8565b601f01601f19169190910160400192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b8281526040602082015260006135e360408301846138ca565b848152836020820152826040820152608060608201526000613a6060808301846138ca565b9695505050505050565b60008219821115613a7d57613a7d613b1f565b500190565b600082613a9d57634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615613abc57613abc613b1f565b500290565b600082821015613ad357613ad3613b1f565b500390565b60005b83811015613af3578181015183820152602001613adb565b838111156120e85750506000910152565b6000600019821415613b1857613b18613b1f565b5060010190565b634e487b7160e01b600052601160045260246000fd5b801515811461302457600080fdfea26469706673582212209c8c81f5323e15d1e152d078b955a1944aa60a8b89ebe78d7aba061d7ecea43464736f6c63430008040033",
  "deployedBytecode": "",
  "libraries": {
    "WethUtils": "0xb3ed3C150846F7363509d2A1A2B77a2a00DC8094"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 189,
        "contract": "contracts/farms/FantasticStaking.sol:FantasticStaking",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 7,
        "contract": "contracts/farms/FantasticStaking.sol:FantasticStaking",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 5644,
        "contract": "contracts/farms/FantasticStaking.sol:FantasticStaking",
        "label": "stakingToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IYToken)8394"
      },
      {
        "astId": 5647,
        "contract": "contracts/farms/FantasticStaking.sol:FantasticStaking",
        "label": "stakingTokenReserve",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IYTokenReserve)8418"
      },
      {
        "astId": 5650,
        "contract": "contracts/farms/FantasticStaking.sol:FantasticStaking",
        "label": "rewardTokens",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 5655,
        "contract": "contracts/farms/FantasticStaking.sol:FantasticStaking",
        "label": "rewardData",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(Reward)5622_storage)"
      },
      {
        "astId": 5669,
        "contract": "contracts/farms/FantasticStaking.sol:FantasticStaking",
        "label": "minters",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5672,
        "contract": "contracts/farms/FantasticStaking.sol:FantasticStaking",
        "label": "mintersArray",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 5678,
        "contract": "contracts/farms/FantasticStaking.sol:FantasticStaking",
        "label": "rewardDistributors",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 5684,
        "contract": "contracts/farms/FantasticStaking.sol:FantasticStaking",
        "label": "userRewardPerTokenPaid",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 5690,
        "contract": "contracts/farms/FantasticStaking.sol:FantasticStaking",
        "label": "rewards",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 5692,
        "contract": "contracts/farms/FantasticStaking.sol:FantasticStaking",
        "label": "totalSupply",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 5694,
        "contract": "contracts/farms/FantasticStaking.sol:FantasticStaking",
        "label": "lockedSupply",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 5699,
        "contract": "contracts/farms/FantasticStaking.sol:FantasticStaking",
        "label": "balances",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_struct(Balances)5631_storage)"
      },
      {
        "astId": 5705,
        "contract": "contracts/farms/FantasticStaking.sol:FantasticStaking",
        "label": "userLocks",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_array(t_struct(LockedBalance)5636_storage)dyn_storage)"
      },
      {
        "astId": 5711,
        "contract": "contracts/farms/FantasticStaking.sol:FantasticStaking",
        "label": "userEarnings",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_array(t_struct(LockedBalance)5636_storage)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(LockedBalance)5636_storage)dyn_storage": {
        "base": "t_struct(LockedBalance)5636_storage",
        "encoding": "dynamic_array",
        "label": "struct FantasticStaking.LockedBalance[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IYToken)8394": {
        "encoding": "inplace",
        "label": "contract IYToken",
        "numberOfBytes": "20"
      },
      "t_contract(IYTokenReserve)8418": {
        "encoding": "inplace",
        "label": "contract IYTokenReserve",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(LockedBalance)5636_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct FantasticStaking.LockedBalance[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(LockedBalance)5636_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Balances)5631_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct FantasticStaking.Balances)",
        "numberOfBytes": "32",
        "value": "t_struct(Balances)5631_storage"
      },
      "t_mapping(t_address,t_struct(Reward)5622_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct FantasticStaking.Reward)",
        "numberOfBytes": "32",
        "value": "t_struct(Reward)5622_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Balances)5631_storage": {
        "encoding": "inplace",
        "label": "struct FantasticStaking.Balances",
        "members": [
          {
            "astId": 5624,
            "contract": "contracts/farms/FantasticStaking.sol:FantasticStaking",
            "label": "total",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5626,
            "contract": "contracts/farms/FantasticStaking.sol:FantasticStaking",
            "label": "unlocked",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5628,
            "contract": "contracts/farms/FantasticStaking.sol:FantasticStaking",
            "label": "locked",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5630,
            "contract": "contracts/farms/FantasticStaking.sol:FantasticStaking",
            "label": "earned",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(LockedBalance)5636_storage": {
        "encoding": "inplace",
        "label": "struct FantasticStaking.LockedBalance",
        "members": [
          {
            "astId": 5633,
            "contract": "contracts/farms/FantasticStaking.sol:FantasticStaking",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5635,
            "contract": "contracts/farms/FantasticStaking.sol:FantasticStaking",
            "label": "unlockTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Reward)5622_storage": {
        "encoding": "inplace",
        "label": "struct FantasticStaking.Reward",
        "members": [
          {
            "astId": 5615,
            "contract": "contracts/farms/FantasticStaking.sol:FantasticStaking",
            "label": "periodFinish",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5617,
            "contract": "contracts/farms/FantasticStaking.sol:FantasticStaking",
            "label": "rewardRate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5619,
            "contract": "contracts/farms/FantasticStaking.sol:FantasticStaking",
            "label": "lastUpdateTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5621,
            "contract": "contracts/farms/FantasticStaking.sol:FantasticStaking",
            "label": "rewardPerTokenStored",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}